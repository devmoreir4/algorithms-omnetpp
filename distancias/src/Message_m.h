//
// Generated file, do not edit! Created by opp_msgtool 6.1 from Message.msg.
//

#ifndef __MESSAGE_M_H
#define __MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Message;
/**
 * Class generated from <tt>Message.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message Message
 * {
 *     int set[];
 * 
 * }
 * </pre>
 */
class Message : public ::omnetpp::cMessage
{
  protected:
    int *set = nullptr;
    size_t set_arraysize = 0;

  private:
    void copy(const Message& other);

  protected:
    bool operator==(const Message&) = delete;

  public:
    Message(const char *name=nullptr, short kind=0);
    Message(const Message& other);
    virtual ~Message();
    Message& operator=(const Message& other);
    virtual Message *dup() const override {return new Message(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setSetArraySize(size_t size);
    virtual size_t getSetArraySize() const;
    virtual int getSet(size_t k) const;
    virtual void setSet(size_t k, int set);
    virtual void insertSet(size_t k, int set);
    [[deprecated]] void insertSet(int set) {appendSet(set);}
    virtual void appendSet(int set);
    virtual void eraseSet(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Message& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Message& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Message *fromAnyPtr(any_ptr ptr) { return check_and_cast<Message*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MESSAGE_M_H

